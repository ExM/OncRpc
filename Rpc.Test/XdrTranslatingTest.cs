using System;
using NUnit.Framework;
using System.IO;
using System.Collections.Generic;
using Rpc.MessageProtocol;
using Xdr;
using Rpc.BindingProtocols;

namespace Rpc
{
	[TestFixture]
	public class XdrTranslatingTest
	{
		[Test]
		public void PortMapperDump()
		{
			var conn = TestStubConnector.FromLog(@"
F1E2D3C4 00000000 00000002 000186A0 00000002 00000004 00000000 00000000
00000000 00000000", @"
F1E2D3C4 00000001 00000000 00000000 00000000 00000000 00000001 000186A0
00000002 00000006 0000006F 00000001 000186A0 00000002 00000011 0000006F
00000001 000186B8 00000001 00000011 0000BFA1 00000001 000186B8 00000001
00000006 0000E10D 00000000");
			var client = new PortMapper(conn);
			client.Dump((list) =>
			{
				Assert.AreEqual(111, list[0].port);
				Assert.AreEqual(100000, list[0].prog);
				Assert.AreEqual(6, list[0].prot);
				Assert.AreEqual(2, list[0].vers);

				Assert.AreEqual(111, list[1].port);
				Assert.AreEqual(100000, list[1].prog);
				Assert.AreEqual(17, list[1].prot);
				Assert.AreEqual(2, list[1].vers);

				Assert.AreEqual(49057, list[2].port);
				Assert.AreEqual(100024, list[2].prog);
				Assert.AreEqual(17, list[2].prot);
				Assert.AreEqual(1, list[2].vers);

				Assert.AreEqual(57613, list[3].port);
				Assert.AreEqual(100024, list[3].prog);
				Assert.AreEqual(6, list[3].prot);
				Assert.AreEqual(1, list[3].vers);
			}, (e) => Assert.Fail("unexpected exception: {0}", e));
		}

		[Test]
		public void PortMapperNull()
		{
			var conn = TestStubConnector.FromLog(@"
F1E2D3C4 00000000 00000002 000186A0 00000002 00000000 00000000 00000000
00000000 00000000", @"
F1E2D3C4 00000001 00000000 00000000 00000000 00000000");
			var client = new PortMapper(conn);

			client.Null(() => {}, (e) => Assert.Fail("unexpected exception: {0}", e));
		}
		
		[Test]
		public void RpcBinder_GetStat()
		{
			var conn = TestStubConnector.FromLog(@"
F1E2D3C4 00000000 00000002 000186A0 00000004 0000000C 00000000 00000000
00000000 00000000", @"
F1E2D3C4 00000001 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000003 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000010 00000004 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000010 00000004 00000000 00000000
00000001 00000020 00000009 00000000 00000001 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000003 00000020 00000009 00000000
00000000");

			var client = new RpcBindV4(conn);

			client.GetStat((stats) =>
			{
				Assert.IsNotNull(stats);

				Assert.IsEmpty(stats.V2.addrinfo);
				Assert.IsEmpty(stats.V2.rmtinfo);
				Assert.AreEqual(0, stats.V2.setinfo);
				Assert.AreEqual(0, stats.V2.unsetinfo);
				Assert.AreEqual(rpcb_stat.RPCBSTAT_HIGHPROC, stats.V2.info.Length);

			}, (e) => Assert.Fail("unexpected exception: {0}", e));
		}

		[Test]
		public void RpcBinder_Dump()
		{
			var conn = TestStubConnector.FromLog(@"
F1E2D3C4 00000000 00000002 000186A0 00000004 00000004 00000000 00000000
00000000 00000000", @"
F1E2D3C4000000010000000000000000 000000000000000000000001000186A0 00000004000000047463703600000008 3A3A2E302E3131310000000973757065
727573657200000000000001000186A0 00000003000000047463703600000008 3A3A2E302E3131310000000973757065 727573657200000000000001000186A0
00000004000000047564703600000008 3A3A2E302E3131310000000973757065 727573657200000000000001000186A0 00000003000000047564703600000008
3A3A2E302E3131310000000973757065 727573657200000000000001000186A0 0000000400000003746370000000000D 302E302E302E302E302E313131000000
00000009737570657275736572000000 00000001000186A00000000300000003 746370000000000D302E302E302E302E 302E3131310000000000000973757065
727573657200000000000001000186A0 0000000200000003746370000000000D 302E302E302E302E302E313131000000 00000009737570657275736572000000
00000001000186A00000000400000003 756470000000000D302E302E302E302E 302E3131310000000000000973757065 727573657200000000000001000186A0
0000000300000003756470000000000D 302E302E302E302E302E313131000000 00000009737570657275736572000000 00000001000186A00000000200000003
756470000000000D302E302E302E302E 302E3131310000000000000973757065 727573657200000000000001000186A0 00000004000000056C6F63616C000000
000000152F7661722F72756E2F727063 62696E642E736F636B00000000000009 73757065727573657200000000000001 000186A000000003000000056C6F6361
6C000000000000152F7661722F72756E 2F72706362696E642E736F636B000000 00000009737570657275736572000000 00000001000186A50000000100000003
756470000000000F302E302E302E302E 3136342E323035000000000973757065 727573657200000000000001000186A5 0000000100000003746370000000000E
302E302E302E302E3231362E35310000 00000009737570657275736572000000 00000001000186A50000000100000004 756470360000000A3A3A2E3230392E31
36330000000000097375706572757365 7200000000000001000186A500000001 00000004746370360000000A3A3A2E31 38322E31383300000000000973757065
727573657200000000000001000186A5 0000000200000003756470000000000F 302E302E302E302E3133332E31373500 00000009737570657275736572000000
00000001000186A50000000200000003 746370000000000E302E302E302E302E 3138382E343400000000000973757065 727573657200000000000001000186A5
0000000200000004756470360000000A 3A3A2E3233332E313136000000000009 73757065727573657200000000000001 000186A5000000020000000474637036
0000000A3A3A2E3134312E3138360000 00000009737570657275736572000000 00000001000186A50000000300000003 756470000000000F302E302E302E302E
3139332E313934000000000973757065 727573657200000000000001000186A5 0000000300000003746370000000000F 302E302E302E302E3230312E31383700
00000009737570657275736572000000 00000001000186A50000000300000004 756470360000000A3A3A2E3138352E31 34380000000000097375706572757365
7200000000000001000186A500000003 00000004746370360000000A3A3A2E31 36392E31333700000000000973757065 727573657200000000000001000186B8
0000000100000003756470000000000E 302E302E302E302E3133312E36360000 000000033130360000000001000186B8 0000000100000003746370000000000F
302E302E302E302E3137332E32313500 000000033130360000000001000186B8 00000001000000047564703600000009 3A3A2E3231322E323500000000000003
3130360000000001000186B800000001 00000004746370360000000A3A3A2E32 31322E31313500000000000331303600 00000001000186A30000000200000003
746370000000000B302E302E302E302E 382E310000000007756E6B6E6F776E00 00000001000186A30000000300000003 746370000000000B302E302E302E302E
382E310000000007756E6B6E6F776E00 00000001000186A30000000400000003 746370000000000B302E302E302E302E 382E310000000007756E6B6E6F776E00
00000001000187830000000200000003 746370000000000B302E302E302E302E 382E310000000007756E6B6E6F776E00 00000001000187830000000300000003
746370000000000B302E302E302E302E 382E310000000007756E6B6E6F776E00 00000001000186A30000000200000003 756470000000000B302E302E302E302E
382E310000000007756E6B6E6F776E00 00000001000186A30000000300000003 756470000000000B302E302E302E302E 382E310000000007756E6B6E6F776E00
00000001000186A30000000400000003 756470000000000B302E302E302E302E 382E310000000007756E6B6E6F776E00 00000001000187830000000200000003
756470000000000B302E302E302E302E 382E310000000007756E6B6E6F776E00 00000001000187830000000300000003 756470000000000B302E302E302E302E
382E310000000007756E6B6E6F776E00 00000001000186A30000000200000004 74637036000000063A3A2E382E310000 00000007756E6B6E6F776E0000000001
000186A3000000030000000474637036 000000063A3A2E382E31000000000007 756E6B6E6F776E0000000001000186A3 00000004000000047463703600000006
3A3A2E382E31000000000007756E6B6E 6F776E00000000010001878300000002 0000000474637036000000063A3A2E38 2E31000000000007756E6B6E6F776E00
00000001000187830000000300000004 74637036000000063A3A2E382E310000 00000007756E6B6E6F776E0000000001 000186A3000000020000000475647036
000000063A3A2E382E31000000000007 756E6B6E6F776E0000000001000186A3 00000003000000047564703600000006 3A3A2E382E31000000000007756E6B6E
6F776E0000000001000186A300000004 0000000475647036000000063A3A2E38 2E31000000000007756E6B6E6F776E00 00000001000187830000000200000004
75647036000000063A3A2E382E310000 00000007756E6B6E6F776E0000000001 00018783000000030000000475647036 000000063A3A2E382E31000000000007
756E6B6E6F776E0000000001000186B5 0000000100000003756470000000000E 302E302E302E302E3231352E31350000 00000007756E6B6E6F776E0000000001
000186B5000000030000000375647000 0000000E302E302E302E302E3231352E 3135000000000007756E6B6E6F776E00 00000001000186B50000000400000003
756470000000000E302E302E302E302E 3231352E3135000000000007756E6B6E 6F776E0000000001000186B500000001 00000003746370000000000F302E302E
302E302E3233312E3138340000000007 756E6B6E6F776E0000000001000186B5 0000000300000003746370000000000F 302E302E302E302E3233312E31383400
00000007756E6B6E6F776E0000000001 000186B5000000040000000374637000 0000000F302E302E302E302E3233312E 3138340000000007756E6B6E6F776E00
00000001000186B50000000100000004 756470360000000A3A3A2E3137382E31 3333000000000007756E6B6E6F776E00 00000001000186B50000000300000004
756470360000000A3A3A2E3137382E31 3333000000000007756E6B6E6F776E00 00000001000186B50000000400000004 756470360000000A3A3A2E3137382E31
3333000000000007756E6B6E6F776E00 00000001000186B50000000100000004 746370360000000A3A3A2E3139312E31 3134000000000007756E6B6E6F776E00
00000001000186B50000000300000004 746370360000000A3A3A2E3139312E31 3134000000000007756E6B6E6F776E00 00000001000186B50000000400000004
746370360000000A3A3A2E3139312E31 3134000000000007756E6B6E6F776E00 00000000");

			var client = new RpcBindV4(conn);

			client.Dump((list) =>
			{
				Assert.AreEqual(60, list.Count);
			}, (e) => Assert.Fail("unexpected exception: {0}", e));
		}
	}
}

